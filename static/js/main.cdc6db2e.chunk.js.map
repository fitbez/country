{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","countries","setCountries","searchedCountry","setSearchedCountry","filteredCountries","toUpperCase","countryToShow","filter","country","name","indexOf","useEffect","axios","get","then","response","data","console","log","className","onChange","e","target","value","type","length","map","pop","parseInt","population","toLocaleString","key","src","flag","alt","capital","languages","language","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2RA0FeA,EAtFH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,OAE8BF,mBAAS,IAFvC,mBAETG,EAFS,KAEQC,EAFR,KAWVC,EAAoBF,EAAgBG,cACpCC,EAAgBN,EAAUO,QAAO,SAACC,GACtC,OAAOA,EAAQC,KAAKJ,cAAcK,QAAQN,IAAsB,KAYlE,OARAO,qBAAU,WACRC,IAAMC,IAAI,wCAAwCC,MAAK,SAACC,GAEtDd,EAAac,EAASC,WAEvB,IAEHC,QAAQC,IAAIZ,GAEV,yBAAKa,UAAU,OACb,yBAAKA,UAAU,UAAf,mBACkB,2BAAOC,SAxBR,SAACC,GACpBlB,EAAmBkB,EAAEC,OAAOC,QAuBuBC,KAAK,UAEtD,yBAAKL,UAAU,kBACZb,EAAcmB,QAAU,IACvB,uEACEnB,EAAcmB,QAAU,GAC1B,uEAC2B,IAAzBnB,EAAcmB,OAChBnB,EAAcoB,KAAI,SAAClB,GACjB,IAAImB,EAAMC,SAASpB,EAAQqB,YAAYC,iBACvC,OACE,yBAAKC,IAAKvB,EAAQC,MAChB,yBAAKU,UAAU,iBAAiBY,IAAKvB,EAAQC,MAC3C,4BAAKD,EAAQC,MACb,yBAAKU,UAAU,cACb,yBAAKa,IAAKxB,EAAQyB,KAAMC,IAAI,WAGhC,yBAAKf,UAAU,gBACb,6BACE,sCACW,IACT,0BAAMA,UAAU,WAAWX,EAAQ2B,SAAgB,KAErD,0CACc,0BAAMhB,UAAU,cAAcQ,GAAY,MAG1D,yBAAKR,UAAU,YACb,yCACA,6BACGX,EAAQ4B,UAAUV,KAAI,SAACW,GACtB,OAAO,wBAAIN,IAAKM,EAAS5B,MAAO4B,EAAS5B,gBASvDH,EAAcoB,KAAI,SAAClB,GACjB,OAAON,EAAgBuB,OACrB,yBAAKN,UAAU,eAAeY,IAAKvB,EAAQC,MACzC,0BAAM6B,QAAS,kBAAMnC,EAAmBK,EAAQC,QAC7CD,EAAQC,OAIb,oCCrEM8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.cdc6db2e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [searchedCountry, setSearchedCountry] = useState(\"\");\n\n  const handleSearch = (e) => {\n    setSearchedCountry(e.target.value);\n  };\n\n  // console.log(searchedCountry);\n\n  //country to show from the search bar\n  const filteredCountries = searchedCountry.toUpperCase();\n  const countryToShow = countries.filter((country) => {\n    return country.name.toUpperCase().indexOf(filteredCountries) > -1;\n  });\n\n  //fetching data from the api\n  useEffect(() => {\n    axios.get(\"https://restcountries.eu/rest/v2/all\").then((response) => {\n      // console.log(response.data);\n      setCountries(response.data);\n    });\n  }, []);\n\n  console.log(countryToShow);\n  return (\n    <div className=\"App\">\n      <div className=\"search\">\n        Search country: <input onChange={handleSearch} type=\"text\" />\n      </div>\n      <div className=\"show-countries\">\n        {countryToShow.length >= 250 ? (\n          <p>Please enter a country to know about....</p>\n        ) : countryToShow.length >= 20 ? (\n          <p>Too many matches, specify another filter</p>\n        ) : countryToShow.length === 1 ? (\n          countryToShow.map((country) => {\n            let pop = parseInt(country.population).toLocaleString();\n            return (\n              <div key={country.name}>\n                <div className=\"country-header\" key={country.name}>\n                  <h2>{country.name}</h2>\n                  <div className=\"flag-image\">\n                    <img src={country.flag} alt=\"flag\" />\n                  </div>\n                </div>\n                <div className=\"country-info\">\n                  <div>\n                    <p>\n                      Capital:{\" \"}\n                      <span className=\"capital\">{country.capital}</span>{\" \"}\n                    </p>\n                    <p>\n                      Population: <span className=\"population\">{pop}</span>{\" \"}\n                    </p>\n                  </div>\n                  <div className=\"language\">\n                    <h3>Languages</h3>\n                    <div>\n                      {country.languages.map((language) => {\n                        return <li key={language.name}>{language.name}</li>;\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          countryToShow.map((country) => {\n            return searchedCountry.length ? (\n              <div className=\"country-list\" key={country.name}>\n                <span onClick={() => setSearchedCountry(country.name)}>\n                  {country.name}\n                </span>\n              </div>\n            ) : (\n              <div></div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}